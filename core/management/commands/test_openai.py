from django.core.management.base import BaseCommand
from django.conf import settings
from core.services import OpenAIService


class Command(BaseCommand):
    help = 'Probar la integraci√≥n con OpenAI (GPT-5)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--test-key',
            action='store_true',
            help='Solo validar la API key',
        )

    def handle(self, *args, **options):
        if not settings.OPENAI_API_KEY:
            self.stdout.write(
                self.style.ERROR('‚ùå OPENAI_API_KEY no est√° configurada en settings')
            )
            return

        openai_service = OpenAIService()

        if options['test_key']:
            self._test_api_key(openai_service)
        else:
            self._test_full_integration(openai_service)

    def _test_api_key(self, openai_service):
        """Probar solo la validaci√≥n de la API key"""
        self.stdout.write('üîë Probando API key de OpenAI...')
        
        try:
            is_valid = openai_service.validate_api_key()
            if is_valid:
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ API key de OpenAI es v√°lida (GPT-5 disponible)')
                )
            else:
                self.stdout.write(
                    self.style.ERROR('‚ùå API key de OpenAI no es v√°lida o el modelo no est√° disponible')
                )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error validando API key: {e}')
            )

    def _test_full_integration(self, openai_service):
        """Probar la integraci√≥n completa"""
        self.stdout.write('üß™ Probando integraci√≥n completa con OpenAI...')
        
        # Test 1: Validar API key
        self.stdout.write('1Ô∏è‚É£ Validando API key...')
        try:
            is_valid = openai_service.validate_api_key()
            if not is_valid:
                self.stdout.write(
                    self.style.ERROR('‚ùå API key no v√°lida. Deteniendo pruebas.')
                )
                return
            self.stdout.write(
                self.style.SUCCESS('‚úÖ API key v√°lida')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error validando API key: {e}')
            )
            return

        # Test 2: Probar con imagen de ejemplo (si existe)
        self.stdout.write('2Ô∏è‚É£ Probando an√°lisis de imagen con GPT-5...')
        self.stdout.write(
            self.style.WARNING('‚ö†Ô∏è  Para probar el an√°lisis de imagen, necesitas una imagen de comida.')
        )
        self.stdout.write(
            'üí° Puedes usar: python manage.py test_openai --image-path /path/to/image.jpg'
        )

        self.stdout.write(
            self.style.SUCCESS('‚úÖ Integraci√≥n b√°sica con OpenAI configurada correctamente')
        )
        self.stdout.write('üìù Recuerda configurar tu OPENAI_API_KEY en el archivo .env') 